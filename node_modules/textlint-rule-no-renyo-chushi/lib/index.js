"use strict";

var _sentenceSplitter = require("sentence-splitter");

var _kuromojin = require("kuromojin");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = function (context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        getSource = context.getSource;

    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        var sentences = (0, _sentenceSplitter.split)(text);

        var checkRenyo = function checkRenyo(a, b) {

            var errorPattern = [];
            var token1 = {};
            token1.pos = '動詞';
            token1.pos_detail_1 = '自立';
            token1.conjugated_form = '連用形';
            errorPattern.push(token1);

            var token2 = {};
            token2.surface_form = '、';
            token2.pos = '名詞';
            errorPattern.push(token2);

            var target = [];
            var aToken1 = {};
            aToken1.pos = a.pos;
            aToken1.pos_detail_1 = a.pos_detail_1;
            aToken1.conjugated_form = a.conjugated_form;
            target.push(aToken1);

            var bToken2 = {};
            bToken2.surface_form = b.surface_form;
            bToken2.pos = b.pos;
            target.push(bToken2);

            if (JSON.stringify(errorPattern) === JSON.stringify(target)) {
                return true;
            } else {
                return false;
            }
        };

        return (0, _kuromojin.getTokenizer)().then(function (tokenizer) {
            sentences.forEach(function (sentence, i) {
                var tokens = tokenizer.tokenizeForSentence(sentence.raw);

                tokens.forEach(function (token, j) {
                    //　対象のtokenが文末でなければ確認する 
                    if (j < tokens.length - 1) {
                        var result = checkRenyo(tokens[j], tokens[j + 1]);

                        if (result === true) {
                            var regex = new RegExp(tokens[j].surface_form + tokens[j + 1].surface_form, 'g');
                            var indexOfError = regex.exec(text);
                            var ruleError = new RuleError("連用中止形が使われています。: " + tokens[j].surface_form + tokens[j + 1].surface_form, {
                                index: indexOfError.index // padding of index
                            });
                            report(node, ruleError);
                        }
                    }
                });
            });
        });
    });
};
//# sourceMappingURL=index.js.map